// source: FLmon.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.FLmonRequest', null, global);
goog.exportSymbol('proto.FLmonRequestManagement', null, global);
goog.exportSymbol('proto.FLmonResponse', null, global);
goog.exportSymbol('proto.FLmonResponseManagement', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FLmonRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FLmonRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.FLmonRequest.displayName = 'proto.FLmonRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FLmonRequestManagement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FLmonRequestManagement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.FLmonRequestManagement.displayName = 'proto.FLmonRequestManagement';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FLmonResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FLmonResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.FLmonResponse.displayName = 'proto.FLmonResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FLmonResponseManagement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FLmonResponseManagement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.FLmonResponseManagement.displayName = 'proto.FLmonResponseManagement';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FLmonRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.FLmonRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FLmonRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FLmonRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FLmonRequest}
 */
proto.FLmonRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FLmonRequest;
  return proto.FLmonRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FLmonRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FLmonRequest}
 */
proto.FLmonRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FLmonRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FLmonRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FLmonRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FLmonRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 type = 1;
 * @return {number}
 */
proto.FLmonRequest.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.FLmonRequest} returns this
 */
proto.FLmonRequest.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FLmonRequestManagement.prototype.toObject = function(opt_includeInstance) {
  return proto.FLmonRequestManagement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FLmonRequestManagement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FLmonRequestManagement.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cri: jspb.Message.getFieldWithDefault(msg, 2, 0),
    accClass: jspb.Message.getFieldWithDefault(msg, 3, ""),
    rouPred: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FLmonRequestManagement}
 */
proto.FLmonRequestManagement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FLmonRequestManagement;
  return proto.FLmonRequestManagement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FLmonRequestManagement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FLmonRequestManagement}
 */
proto.FLmonRequestManagement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCri(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccClass(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRouPred(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FLmonRequestManagement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FLmonRequestManagement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FLmonRequestManagement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FLmonRequestManagement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCri();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int32 type = 1;
 * @return {number}
 */
proto.FLmonRequestManagement.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.FLmonRequestManagement} returns this
 */
proto.FLmonRequestManagement.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 cri = 2;
 * @return {number}
 */
proto.FLmonRequestManagement.prototype.getCri = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.FLmonRequestManagement} returns this
 */
proto.FLmonRequestManagement.prototype.setCri = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string acc_class = 3;
 * @return {string}
 */
proto.FLmonRequestManagement.prototype.getAccClass = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.FLmonRequestManagement} returns this
 */
proto.FLmonRequestManagement.prototype.setAccClass = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.FLmonRequestManagement} returns this
 */
proto.FLmonRequestManagement.prototype.clearAccClass = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FLmonRequestManagement.prototype.hasAccClass = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string rou_pred = 4;
 * @return {string}
 */
proto.FLmonRequestManagement.prototype.getRouPred = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.FLmonRequestManagement} returns this
 */
proto.FLmonRequestManagement.prototype.setRouPred = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.FLmonRequestManagement} returns this
 */
proto.FLmonRequestManagement.prototype.clearRouPred = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FLmonRequestManagement.prototype.hasRouPred = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FLmonResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.FLmonResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FLmonResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FLmonResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    acc: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tel: jspb.Message.getFieldWithDefault(msg, 2, ""),
    trl: jspb.Message.getFieldWithDefault(msg, 3, ""),
    rou: jspb.Message.getFieldWithDefault(msg, 4, ""),
    clc: jspb.Message.getFieldWithDefault(msg, 5, ""),
    ent: jspb.Message.getFieldWithDefault(msg, 6, ""),
    trt: jspb.Message.getFieldWithDefault(msg, 7, ""),
    upt: jspb.Message.getFieldWithDefault(msg, 8, ""),
    dit: jspb.Message.getFieldWithDefault(msg, 9, ""),
    agt: jspb.Message.getFieldWithDefault(msg, 10, ""),
    cld: jspb.Message.getFieldWithDefault(msg, 11, ""),
    pre: jspb.Message.getFieldWithDefault(msg, 12, ""),
    sul: jspb.Message.getFieldWithDefault(msg, 13, ""),
    crl: jspb.Message.getFieldWithDefault(msg, 14, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FLmonResponse}
 */
proto.FLmonResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FLmonResponse;
  return proto.FLmonResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FLmonResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FLmonResponse}
 */
proto.FLmonResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAcc(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTel(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRou(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setClc(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnt(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrt(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpt(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setDit(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setAgt(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setCld(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setPre(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setSul(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setCrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FLmonResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FLmonResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FLmonResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FLmonResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAcc();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTel();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRou();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getClc();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getEnt();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTrt();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getUpt();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getDit();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getAgt();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getCld();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getPre();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getSul();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getCrl();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
};


/**
 * optional string acc = 1;
 * @return {string}
 */
proto.FLmonResponse.prototype.getAcc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.FLmonResponse} returns this
 */
proto.FLmonResponse.prototype.setAcc = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string tel = 2;
 * @return {string}
 */
proto.FLmonResponse.prototype.getTel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.FLmonResponse} returns this
 */
proto.FLmonResponse.prototype.setTel = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string trl = 3;
 * @return {string}
 */
proto.FLmonResponse.prototype.getTrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.FLmonResponse} returns this
 */
proto.FLmonResponse.prototype.setTrl = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string rou = 4;
 * @return {string}
 */
proto.FLmonResponse.prototype.getRou = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.FLmonResponse} returns this
 */
proto.FLmonResponse.prototype.setRou = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string clc = 5;
 * @return {string}
 */
proto.FLmonResponse.prototype.getClc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.FLmonResponse} returns this
 */
proto.FLmonResponse.prototype.setClc = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string ent = 6;
 * @return {string}
 */
proto.FLmonResponse.prototype.getEnt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.FLmonResponse} returns this
 */
proto.FLmonResponse.prototype.setEnt = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string trt = 7;
 * @return {string}
 */
proto.FLmonResponse.prototype.getTrt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.FLmonResponse} returns this
 */
proto.FLmonResponse.prototype.setTrt = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string upt = 8;
 * @return {string}
 */
proto.FLmonResponse.prototype.getUpt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.FLmonResponse} returns this
 */
proto.FLmonResponse.prototype.setUpt = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string dit = 9;
 * @return {string}
 */
proto.FLmonResponse.prototype.getDit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.FLmonResponse} returns this
 */
proto.FLmonResponse.prototype.setDit = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string agt = 10;
 * @return {string}
 */
proto.FLmonResponse.prototype.getAgt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.FLmonResponse} returns this
 */
proto.FLmonResponse.prototype.setAgt = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string cld = 11;
 * @return {string}
 */
proto.FLmonResponse.prototype.getCld = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.FLmonResponse} returns this
 */
proto.FLmonResponse.prototype.setCld = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string pre = 12;
 * @return {string}
 */
proto.FLmonResponse.prototype.getPre = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.FLmonResponse} returns this
 */
proto.FLmonResponse.prototype.setPre = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string sul = 13;
 * @return {string}
 */
proto.FLmonResponse.prototype.getSul = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.FLmonResponse} returns this
 */
proto.FLmonResponse.prototype.setSul = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string crl = 14;
 * @return {string}
 */
proto.FLmonResponse.prototype.getCrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.FLmonResponse} returns this
 */
proto.FLmonResponse.prototype.setCrl = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FLmonResponseManagement.prototype.toObject = function(opt_includeInstance) {
  return proto.FLmonResponseManagement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FLmonResponseManagement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FLmonResponseManagement.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FLmonResponseManagement}
 */
proto.FLmonResponseManagement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FLmonResponseManagement;
  return proto.FLmonResponseManagement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FLmonResponseManagement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FLmonResponseManagement}
 */
proto.FLmonResponseManagement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FLmonResponseManagement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FLmonResponseManagement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FLmonResponseManagement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FLmonResponseManagement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto);
